{"ast":null,"code":"import _regeneratorRuntime from\"C:/Users/nemiz/Desktop/English-words-card-redux/englishapp/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"C:/Users/nemiz/Desktop/English-words-card-redux/englishapp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import Table from\"./Table/Table.jsx\";import{useSelector,useDispatch}from\"react-redux\";import AddWords from\"./AddWords/AddWords.jsx\";import{useEffect}from\"react\";import{getWords}from\"../redux/action.js\";import{POST_ACTION}from\"../redux/action.js\";import GET from\"../redux/GET.js\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function TableMap(){var posts=useSelector(function(state){return state;});var dispatch=useDispatch();useEffect(function(){function get(){return _get.apply(this,arguments);}function _get(){_get=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(){var data;return _regeneratorRuntime().wrap(function _callee$(_context){while(1)switch(_context.prev=_context.next){case 0:_context.next=2;return GET.getWords();case 2:data=_context.sent;dispatch(getWords(data));case 4:case\"end\":return _context.stop();}},_callee);}));return _get.apply(this,arguments);}get();},[dispatch,posts]);var handleNewWord=function handleNewWord(newWord){dispatch(POST_ACTION(newWord));};return/*#__PURE__*/_jsxs(\"main\",{children:[/*#__PURE__*/_jsx(AddWords,{onNewWord:handleNewWord}),/*#__PURE__*/_jsx(\"div\",{className:\"container__cards\",children:posts.map(function(card,i){return/*#__PURE__*/_jsx(Table,{num:i+1,id:card.id,number:card.number,english:card.english,transcription:card.transcription,russian:card.russian,tags:card.tags},i);})})]});}export default TableMap;","map":{"version":3,"names":["Table","useSelector","useDispatch","AddWords","useEffect","getWords","POST_ACTION","GET","jsx","_jsx","jsxs","_jsxs","TableMap","posts","state","dispatch","get","_get","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","data","wrap","_callee$","_context","prev","next","sent","stop","handleNewWord","newWord","children","onNewWord","className","map","card","i","num","id","number","english","transcription","russian","tags"],"sources":["C:/Users/nemiz/Desktop/English-words-card-redux/englishapp/src/components/TableMap.jsx"],"sourcesContent":["import Table from \"./Table/Table.jsx\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport AddWords from \"./AddWords/AddWords.jsx\";\nimport { useEffect } from \"react\";\nimport { getWords } from \"../redux/action.js\";\nimport { POST_ACTION } from \"../redux/action.js\";\nimport GET from \"../redux/GET.js\";\n\nfunction TableMap() {\n  const posts = useSelector((state) => state);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    async function get() {\n      const data = await GET.getWords();\n      dispatch(getWords(data));\n    }\n    get();\n  }, [dispatch, posts]);\n\n  const handleNewWord = (newWord) => {\n    dispatch(POST_ACTION(newWord));\n  };\n\n  return (\n    <main>\n      <AddWords onNewWord={handleNewWord} />\n      <div className=\"container__cards\">\n        {posts.map((card, i) => (\n          <Table\n            key={i}\n            num={i + 1}\n            id={card.id}\n            number={card.number}\n            english={card.english}\n            transcription={card.transcription}\n            russian={card.russian}\n            tags={card.tags}\n          />\n        ))}\n      </div>\n    </main>\n  );\n}\n\nexport default TableMap;\n"],"mappings":"gTAAA,MAAO,CAAAA,KAAK,KAAM,mBAAmB,CACrC,OAASC,WAAW,CAAEC,WAAW,KAAQ,aAAa,CACtD,MAAO,CAAAC,QAAQ,KAAM,yBAAyB,CAC9C,OAASC,SAAS,KAAQ,OAAO,CACjC,OAASC,QAAQ,KAAQ,oBAAoB,CAC7C,OAASC,WAAW,KAAQ,oBAAoB,CAChD,MAAO,CAAAC,GAAG,KAAM,iBAAiB,CAAC,OAAAC,GAAA,IAAAC,IAAA,gCAAAC,IAAA,IAAAC,KAAA,yBAElC,QAAS,CAAAC,QAAQA,CAAA,CAAG,CAClB,GAAM,CAAAC,KAAK,CAAGZ,WAAW,CAAC,SAACa,KAAK,QAAK,CAAAA,KAAK,GAAC,CAC3C,GAAM,CAAAC,QAAQ,CAAGb,WAAW,EAAE,CAE9BE,SAAS,CAAC,UAAM,SACC,CAAAY,GAAGA,CAAA,SAAAC,IAAA,CAAAC,KAAA,MAAAC,SAAA,YAAAF,KAAA,EAAAA,IAAA,CAAAG,iBAAA,cAAAC,mBAAA,GAAAC,IAAA,CAAlB,SAAAC,QAAA,MAAAC,IAAA,QAAAH,mBAAA,GAAAI,IAAA,UAAAC,SAAAC,QAAA,iBAAAA,QAAA,CAAAC,IAAA,CAAAD,QAAA,CAAAE,IAAA,SAAAF,QAAA,CAAAE,IAAA,SACqB,CAAAtB,GAAG,CAACF,QAAQ,EAAE,QAA3BmB,IAAI,CAAAG,QAAA,CAAAG,IAAA,CACVf,QAAQ,CAACV,QAAQ,CAACmB,IAAI,CAAC,CAAC,CAAC,wBAAAG,QAAA,CAAAI,IAAA,MAAAR,OAAA,GAC1B,UAAAN,IAAA,CAAAC,KAAA,MAAAC,SAAA,GACDH,GAAG,EAAE,CACP,CAAC,CAAE,CAACD,QAAQ,CAAEF,KAAK,CAAC,CAAC,CAErB,GAAM,CAAAmB,aAAa,CAAG,QAAhB,CAAAA,aAAaA,CAAIC,OAAO,CAAK,CACjClB,QAAQ,CAACT,WAAW,CAAC2B,OAAO,CAAC,CAAC,CAChC,CAAC,CAED,mBACEtB,KAAA,SAAAuB,QAAA,eACEzB,IAAA,CAACN,QAAQ,EAACgC,SAAS,CAAEH,aAAc,EAAG,cACtCvB,IAAA,QAAK2B,SAAS,CAAC,kBAAkB,CAAAF,QAAA,CAC9BrB,KAAK,CAACwB,GAAG,CAAC,SAACC,IAAI,CAAEC,CAAC,qBACjB9B,IAAA,CAACT,KAAK,EAEJwC,GAAG,CAAED,CAAC,CAAG,CAAE,CACXE,EAAE,CAAEH,IAAI,CAACG,EAAG,CACZC,MAAM,CAAEJ,IAAI,CAACI,MAAO,CACpBC,OAAO,CAAEL,IAAI,CAACK,OAAQ,CACtBC,aAAa,CAAEN,IAAI,CAACM,aAAc,CAClCC,OAAO,CAAEP,IAAI,CAACO,OAAQ,CACtBC,IAAI,CAAER,IAAI,CAACQ,IAAK,EAPXP,CAAC,CAQN,EACH,CAAC,EACE,GACD,CAEX,CAEA,cAAe,CAAA3B,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}