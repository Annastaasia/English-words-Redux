{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nemiz\\\\Desktop\\\\English-words-card-redux\\\\englishapp\\\\src\\\\components\\\\TableMap.jsx\",\n  _s = $RefreshSig$();\nimport Table from \"./Table/Table.jsx\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport AddWords from \"./AddWords/AddWords.jsx\";\nimport { useEffect } from \"react\";\nimport { getWords } from \"../redux/action.js\";\nimport { POST_ACTION } from \"../redux/action.js\";\nimport GET from \"../redux/GET.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TableMap() {\n  _s();\n  const posts = useSelector(state => state);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    async function get() {\n      const data = await GET.getWords();\n      dispatch(getWords(data));\n    }\n    get();\n  }, [dispatch, posts]);\n  const handleNewWord = newWord => {\n    dispatch(POST_ACTION(newWord));\n  };\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: [/*#__PURE__*/_jsxDEV(AddWords, {\n      onNewWord: handleNewWord\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container__cards\",\n      children: posts.map((card, i) => /*#__PURE__*/_jsxDEV(Table, {\n        num: i + 1,\n        id: card.id,\n        number: card.number,\n        english: card.english,\n        transcription: card.transcription,\n        russian: card.russian,\n        tags: card.tags\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n}\n_s(TableMap, \"Ap/tZFgDXZC2xWGVSUAvBNG5XJs=\", false, function () {\n  return [useSelector, useDispatch];\n});\n_c = TableMap;\nexport default TableMap;\nvar _c;\n$RefreshReg$(_c, \"TableMap\");","map":{"version":3,"names":["Table","useSelector","useDispatch","AddWords","useEffect","getWords","POST_ACTION","GET","jsxDEV","_jsxDEV","TableMap","_s","posts","state","dispatch","get","data","handleNewWord","newWord","children","onNewWord","fileName","_jsxFileName","lineNumber","columnNumber","className","map","card","i","num","id","number","english","transcription","russian","tags","_c","$RefreshReg$"],"sources":["C:/Users/nemiz/Desktop/English-words-card-redux/englishapp/src/components/TableMap.jsx"],"sourcesContent":["import Table from \"./Table/Table.jsx\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport AddWords from \"./AddWords/AddWords.jsx\";\nimport { useEffect } from \"react\";\nimport { getWords } from \"../redux/action.js\";\nimport { POST_ACTION } from \"../redux/action.js\";\nimport GET from \"../redux/GET.js\";\n\nfunction TableMap() {\n  const posts = useSelector((state) => state);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    async function get() {\n      const data = await GET.getWords();\n      dispatch(getWords(data));\n    }\n    get();\n  }, [dispatch, posts]);\n\n  const handleNewWord = (newWord) => {\n    dispatch(POST_ACTION(newWord));\n  };\n\n  return (\n    <main>\n      <AddWords onNewWord={handleNewWord} />\n      <div className=\"container__cards\">\n        {posts.map((card, i) => (\n          <Table\n            key={i}\n            num={i + 1}\n            id={card.id}\n            number={card.number}\n            english={card.english}\n            transcription={card.transcription}\n            russian={card.russian}\n            tags={card.tags}\n          />\n        ))}\n      </div>\n    </main>\n  );\n}\n\nexport default TableMap;\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,mBAAmB;AACrC,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,OAAOC,QAAQ,MAAM,yBAAyB;AAC9C,SAASC,SAAS,QAAQ,OAAO;AACjC,SAASC,QAAQ,QAAQ,oBAAoB;AAC7C,SAASC,WAAW,QAAQ,oBAAoB;AAChD,OAAOC,GAAG,MAAM,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,SAASC,QAAQA,CAAA,EAAG;EAAAC,EAAA;EAClB,MAAMC,KAAK,GAAGX,WAAW,CAAEY,KAAK,IAAKA,KAAK,CAAC;EAC3C,MAAMC,QAAQ,GAAGZ,WAAW,EAAE;EAE9BE,SAAS,CAAC,MAAM;IACd,eAAeW,GAAGA,CAAA,EAAG;MACnB,MAAMC,IAAI,GAAG,MAAMT,GAAG,CAACF,QAAQ,EAAE;MACjCS,QAAQ,CAACT,QAAQ,CAACW,IAAI,CAAC,CAAC;IAC1B;IACAD,GAAG,EAAE;EACP,CAAC,EAAE,CAACD,QAAQ,EAAEF,KAAK,CAAC,CAAC;EAErB,MAAMK,aAAa,GAAIC,OAAO,IAAK;IACjCJ,QAAQ,CAACR,WAAW,CAACY,OAAO,CAAC,CAAC;EAChC,CAAC;EAED,oBACET,OAAA;IAAAU,QAAA,gBACEV,OAAA,CAACN,QAAQ;MAACiB,SAAS,EAAEH;IAAc;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG,eACtCf,OAAA;MAAKgB,SAAS,EAAC,kBAAkB;MAAAN,QAAA,EAC9BP,KAAK,CAACc,GAAG,CAAC,CAACC,IAAI,EAAEC,CAAC,kBACjBnB,OAAA,CAACT,KAAK;QAEJ6B,GAAG,EAAED,CAAC,GAAG,CAAE;QACXE,EAAE,EAAEH,IAAI,CAACG,EAAG;QACZC,MAAM,EAAEJ,IAAI,CAACI,MAAO;QACpBC,OAAO,EAAEL,IAAI,CAACK,OAAQ;QACtBC,aAAa,EAAEN,IAAI,CAACM,aAAc;QAClCC,OAAO,EAAEP,IAAI,CAACO,OAAQ;QACtBC,IAAI,EAAER,IAAI,CAACQ;MAAK,GAPXP,CAAC;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAST;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACE;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACD;AAEX;AAACb,EAAA,CAnCQD,QAAQ;EAAA,QACDT,WAAW,EACRC,WAAW;AAAA;AAAAkC,EAAA,GAFrB1B,QAAQ;AAqCjB,eAAeA,QAAQ;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}